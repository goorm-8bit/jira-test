name: Create Jira Issue on GitHub Issue Open

on:
  issues:
    types:
      - opened

jobs:
  create-jira-issue:
    runs-on: ubuntu-latest

    steps:
      # 1. Jira Issue 생성
      - name: Create Issue in Jira
        id: jira_issue_creation
        uses: actions/github-script@v6
        with:
          script: |
            const JIRA_API_ENDPOINT = `${process.env.JIRA_BASE_URL}/rest/api/3/issue`;
            const JIRA_PROJECT_KEY = process.env.JIRA_PROJECT_KEY;
            
            const issueData = {
              fields: {
                project: { key: JIRA_PROJECT_KEY },
                summary: context.payload.issue.title,
                issuetype: { name: '작업' },
                description: {
                  type: 'doc',
                  version: 1,
                  content: [
                    {
                      type: 'paragraph',
                      content: [{
                        type: 'text',
                        text: `[GitHub Issue Link](${context.payload.issue.html_url})\n\nDescription:\n${context.payload.issue.body}`
                      }]
                    }
                  ]
                }
              }
            };
            
            const response = await fetch(JIRA_API_ENDPOINT, {
              method: 'POST',
              headers: {
                'Authorization': `Basic ${Buffer.from(`${process.env.JIRA_USER_EMAIL}:${process.env.JIRA_API_TOKEN}`).toString('base64')}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(issueData),
            });
            
            if (!response.ok) {
              const errorBody = await response.text();
              throw new Error(`Jira API failed: ${response.statusText}. Response: ${errorBody}`);
            }
            
            const jiraIssue = await response.json();
            console.log(`Jira Issue created: ${jiraIssue.key}`);
            core.setOutput('issue', jiraIssue.key);
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}

      - name: Add Jira Key to Github Issue
        uses: actions/github-script@v6
        with:
          script: |
            const jiraKey = '${{ steps.jira_issue_creation.outputs.issue }}';
            
            // GitHub 이벤트 payload에서 issue 가져오기
            const issue = context.payload.issue;
            if (!issue) {
              throw new Error("This workflow was not triggered by an issue event.");
            }

            // 1. 제목 앞에 [JIRA-KEY] 붙이기
            const newTitle = `[${jiraKey}]${issue.title}`;
            
            // 2. 본문 뒤에 Jira 링크 추가
            const newBody = `${issue.body || ""}\n\n\n**[Jira Issue](${process.env.JIRA_BASE_URL}/browse/${jiraKey})**`;
            
            // 3. 기존 레이블 유지 + synced-from-jira 추가
            const labels = [...(issue.labels?.map(l => l.name) || []), 'synced-from-jira'];
            
            // 3. GitHub 이슈 업데이트
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              title: newTitle,
              body: newBody,
              labels: labels
            });
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}

      - name: 브랜치 생성
        run: |
          TYPE=$(echo "${{ github.event.issue.title }}" | grep -oP '(?<=\]\[).+?(?=\])' | tr '[:upper:]' '[:lower:]')
          JIRA_KEY=${{ steps.jira_issue_creation.outputs.jiraKey }}
          ISSUE_NUMBER=${{ github.event.issue.number }}
          BRANCH_NAME="$TYPE/$JIRA_KEY-$ISSUE_NUMBER"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

      - name: Comment
        uses: actions/github-script@v6
        with:
          script: |
            const jiraKey='${{ steps.jira_issue_creation.outputs.jiraKey }}';
            const issueNumber=${{ github.event.issue.number }};
            const branchName=process.env.BRANCH_NAME;

            const comments = await github.rest.issues.listComments({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber });
            if (!comments.data.some(c => c.body.includes(jiraKey))) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `⚡ Jira 이슈 생성: [${jiraKey}](${process.env.JIRA_BASE_URL}/browse/${jiraKey})\n🔀 브랜치: ${branchName}`
              });
            }
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
