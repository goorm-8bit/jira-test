name: Create Jira Issue on GitHub Issue Open

on:
  issues:
    types:
      - opened
      - reopened

jobs:
  create-jira-issue:
    if: "!contains(github.event.issue.labels.*.name, 'jira')"

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - name: Jira 이슈 생성
        id: jira_issue_creation
        uses: actions/github-script@v6
        with:
          script: |
            const JIRA_API_ENDPOINT = `${process.env.JIRA_BASE_URL}/rest/api/3/issue`;
            const JIRA_PROJECT_KEY = process.env.JIRA_PROJECT_KEY;
            const ISSUE_TYPE = '작업';

            // GitHub Issue 제목에서 TYPE 추출 (첫 번째 대괄호)
            let TYPE = (context.payload.issue.title.match(/\[(.*?)\]/) || [])[1];
            if (!TYPE) TYPE = "feature";
            TYPE = TYPE.toLowerCase();
            core.setOutput('type', TYPE);

            // Jira 이슈 생성 데이터
            const issueData = {
              fields: {
                project: { key: JIRA_PROJECT_KEY },
                summary: context.payload.issue.title,
                issuetype: { name: ISSUE_TYPE },
                description: {
                  type: 'doc',
                  version: 1,
                  content: [
                    {
                      type: "paragraph",
                      content: [
                        {
                          type: "text",
                          text: "GitHub Issue",
                          marks: [
                            {
                              type: "link",
                              attrs: { href: context.payload.issue.html_url }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            };
            
            // Jira API 호출
            const response = await fetch(JIRA_API_ENDPOINT, {
              method: 'POST',
              headers: {
                'Authorization': `Basic ${Buffer.from(`${process.env.JIRA_USER_EMAIL}:${process.env.JIRA_API_TOKEN}`).toString('base64')}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(issueData),
            });
            
            if (!response.ok) {
              const errorBody = await response.text();
              throw new Error(`Jira API failed: ${response.statusText}. Response: ${errorBody}`);
            }
            
            const jiraIssue = await response.json();
            console.log(`Jira Issue created: ${jiraIssue.key}`);
            core.setOutput('jiraKey', jiraIssue.key);
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}

      - name: GitHub 이슈에 Jira 키 추가
        uses: actions/github-script@v6
        with:
          script: |
            const jiraKey = '${{ steps.jira_issue_creation.outputs.jiraKey }}';

            // GitHub 이벤트 payload에서 issue 가져오기
            const issue = context.payload.issue;
            if (!issue) {
              throw new Error("이 워크플로우는 이슈 이벤트에 의해 트리거되지 않았습니다.");
            }

            // 레이블 추가
            const labels = [...(issue.labels?.map(l => l.name) || []), 'jira'];

            // GitHub 이슈 업데이트
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: labels
            });

      - name: Jira 이슈 기반 브랜치 생성
        run: |
          TYPE=${{ steps.jira_issue_creation.outputs.type }}
          JIRA_KEY=${{ steps.jira_issue_creation.outputs.jiraKey }}
          ISSUE_NUMBER=${{ github.event.issue.number }}
          BRANCH_NAME="$TYPE/$JIRA_KEY-$ISSUE_NUMBER"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout develop
          git pull
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME

      - name: GitHub 이슈에 댓글 추가
        uses: actions/github-script@v6
        with:
          script: |
            const jiraKey = '${{ steps.jira_issue_creation.outputs.jiraKey }}';
            const issueNumber = ${{ github.event.issue.number }};
            const branchName = process.env.BRANCH_NAME;
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const body = [
              `Jira 이슈 생성: [${jiraKey}](${process.env.JIRA_BASE_URL}/browse/${jiraKey})`,
              `생성된 브랜치: \`${branchName}\``,
              "```bash",
              `git checkout ${branchName}`,
              "```"
            ].join("\n")
            
            if (!comments.data.some(c => c.body.includes(jiraKey))) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: body
              });
            }
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
